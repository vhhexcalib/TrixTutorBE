// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Context.Migrations
{
    [DbContext(typeof(TrixTutorDBContext))]
    partial class TrixTutorDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "HCM",
                            Avatar = "imgurl",
                            Birthday = new DateOnly(2025, 2, 16),
                            Email = "Student@gmail.com",
                            IsBan = false,
                            IsEmailConfirm = true,
                            Name = "Student",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            Phone = "1234567890",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "HCM",
                            Avatar = "imgurl",
                            Birthday = new DateOnly(2025, 2, 16),
                            Email = "Tutor@gmail.com",
                            IsBan = false,
                            IsEmailConfirm = true,
                            Name = "Tutor",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            Phone = "0987654321",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("BusinessObject.BankInformation", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorId");

                    b.ToTable("BankInformation");
                });

            modelBuilder.Entity("BusinessObject.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("UploadedAt")
                        .HasColumnType("date");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("BusinessObject.ConfirmationOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfirmationOTP");
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeedbackById")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackById");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Quantity = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Quantity = 1,
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = 3,
                            Quantity = 1,
                            RoleName = "Student"
                        },
                        new
                        {
                            Id = 4,
                            Quantity = 1,
                            RoleName = "Tutor"
                        });
                });

            modelBuilder.Entity("BusinessObject.SystemAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SystemAccount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@gmail.com",
                            IsBan = false,
                            Name = "Admin",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "Staff@gmail.com",
                            IsBan = false,
                            Name = "Tutor",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("BusinessObject.TutorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("TutorCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Khoa học tự nhiên",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Khoa học xã hội & Nhân văn",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ngoại ngữ",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Khoa học máy tính & Công nghệ",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nghệ thuật & Giải trí",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thể thao & Sức khỏe",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kinh tế & Kinh doanh",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kỹ thuật & Công nghệ",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Y học & Dược học",
                            Quantity = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Toán học",
                            ParentCategoryId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Vật lý",
                            ParentCategoryId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Hóa học",
                            ParentCategoryId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sinh học",
                            ParentCategoryId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Lịch sử",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Địa lý",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Ngữ văn",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Tâm lý học",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Triết học",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Xã hội học",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Luật học",
                            ParentCategoryId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "Tiếng Anh",
                            ParentCategoryId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 22,
                            Name = "Tiếng Pháp",
                            ParentCategoryId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 23,
                            Name = "Tiếng Đức",
                            ParentCategoryId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 24,
                            Name = "Tiếng Trung",
                            ParentCategoryId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 25,
                            Name = "Tiếng Nhật",
                            ParentCategoryId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 26,
                            Name = "Lập trình",
                            ParentCategoryId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 27,
                            Name = "Công nghệ thông tin",
                            ParentCategoryId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 28,
                            Name = "Thiết kế đồ họa",
                            ParentCategoryId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 29,
                            Name = "Âm nhạc",
                            ParentCategoryId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 30,
                            Name = "Mỹ thuật",
                            ParentCategoryId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 31,
                            Name = "Giáo dục thể chất",
                            ParentCategoryId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 32,
                            Name = "Tài chính & Kinh tế",
                            ParentCategoryId = 7,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 33,
                            Name = "Kinh doanh & Quản lý",
                            ParentCategoryId = 7,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 34,
                            Name = "Marketing",
                            ParentCategoryId = 33,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 35,
                            Name = "Kế toán",
                            ParentCategoryId = 33,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 36,
                            Name = "Kỹ thuật cơ khí",
                            ParentCategoryId = 8,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 37,
                            Name = "Kỹ thuật điện - điện tử",
                            ParentCategoryId = 8,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 38,
                            Name = "Y học",
                            ParentCategoryId = 9,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 39,
                            Name = "Dược học",
                            ParentCategoryId = 9,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.TutorContact", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("FacebookURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorId");

                    b.ToTable("TutorContact");
                });

            modelBuilder.Entity("BusinessObject.TutorInformation", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HighestSalaryPerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LowestSalaryPerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TeachingStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTeachDay")
                        .HasColumnType("int");

                    b.Property<int>("TutorCategoryId")
                        .HasColumnType("int");

                    b.HasKey("TutorId");

                    b.HasIndex("TutorCategoryId");

                    b.ToTable("TutorInformation");

                    b.HasData(
                        new
                        {
                            TutorId = 2,
                            Degree = "link",
                            ExperienceYear = "10Year",
                            GeneralProfile = "general profile",
                            HighestSalaryPerHour = 0m,
                            Language = "Vietnamese",
                            LowestSalaryPerHour = 0m,
                            TeachingStyle = "fun",
                            TotalTeachDay = 0,
                            TutorCategoryId = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.BankInformation", b =>
                {
                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithOne("BankInformation")
                        .HasForeignKey("BusinessObject.BankInformation", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Certificate", b =>
                {
                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("Certificates")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.SystemAccount", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("SystemAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.TutorCategory", b =>
                {
                    b.HasOne("BusinessObject.TutorCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BusinessObject.TutorContact", b =>
                {
                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithOne("TutorContact")
                        .HasForeignKey("BusinessObject.TutorContact", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.TutorInformation", b =>
                {
                    b.HasOne("BusinessObject.TutorCategory", "TutorCategory")
                        .WithMany("TutorInformations")
                        .HasForeignKey("TutorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithOne("TutorInformation")
                        .HasForeignKey("BusinessObject.TutorInformation", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("TutorCategory");
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("TutorInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SystemAccounts");
                });

            modelBuilder.Entity("BusinessObject.TutorCategory", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("TutorInformations");
                });

            modelBuilder.Entity("BusinessObject.TutorInformation", b =>
                {
                    b.Navigation("BankInformation")
                        .IsRequired();

                    b.Navigation("Certificates");

                    b.Navigation("TutorContact")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
