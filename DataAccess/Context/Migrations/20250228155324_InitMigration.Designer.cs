// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Context.Migrations
{
    [DbContext(typeof(TrixTutorDBContext))]
    [Migration("20250228155324_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "HCM",
                            Avatar = "imgurl",
                            Birthday = new DateOnly(2025, 2, 28),
                            Email = "Student@gmail.com",
                            IsBan = false,
                            IsEmailConfirm = true,
                            Name = "Student",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            Phone = "1234567890",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "HCM",
                            Avatar = "imgurl",
                            Birthday = new DateOnly(2025, 2, 28),
                            Email = "Tutor@gmail.com",
                            IsBan = false,
                            IsEmailConfirm = true,
                            Name = "Tutor",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            Phone = "0987654321",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("BusinessObject.BankInformation", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorId");

                    b.ToTable("BankInformation");

                    b.HasData(
                        new
                        {
                            TutorId = 2,
                            BankName = "BankName",
                            BankNumber = "1234567890",
                            OwnerName = "Tutor"
                        });
                });

            modelBuilder.Entity("BusinessObject.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("UploadedAt")
                        .HasColumnType("date");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("BusinessObject.ConfirmationOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConfirmationOTP");
                });

            modelBuilder.Entity("BusinessObject.Courses", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("TeachingDateId")
                        .HasColumnType("int");

                    b.Property<string>("TeachingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeachingSlots")
                        .HasColumnType("int");

                    b.Property<int>("TeachingTimeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("TeachingDateId");

                    b.HasIndex("TeachingTimeId");

                    b.HasIndex("TutorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FeedbackById")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("FeedbackById");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BusinessObject.LearningHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CoursesCourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<int?>("TutorInformationTutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("CoursesCourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId")
                        .IsUnique();

                    b.HasIndex("TutorInformationTutorId");

                    b.ToTable("LearningHistory");
                });

            modelBuilder.Entity("BusinessObject.LearningSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LearningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TeachingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TutorAttendance")
                        .HasColumnType("bit");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("TutorReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("LearningSchedule");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BusinessObject.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminChecked")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("ReportById")
                        .HasColumnType("int");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportById");

                    b.HasIndex("TutorId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Quantity = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Quantity = 1,
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = 3,
                            Quantity = 1,
                            RoleName = "Student"
                        },
                        new
                        {
                            Id = 4,
                            Quantity = 1,
                            RoleName = "Tutor"
                        });
                });

            modelBuilder.Entity("BusinessObject.SystemAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SystemAccount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@gmail.com",
                            IsBan = false,
                            Name = "Admin",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "Staff@gmail.com",
                            IsBan = false,
                            Name = "Tutor",
                            Password = "f756011db6e966fa291176eb2426febe028835d5ee6c8d92596888cff156656c",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("BusinessObject.SystemAccountWallet", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LastChangeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId");

                    b.ToTable("SystemAccountWallet");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Balance = 0m,
                            LastChangeAmount = 0m,
                            LastChangeDate = new DateTime(2025, 2, 28, 22, 53, 24, 325, DateTimeKind.Local).AddTicks(7514)
                        });
                });

            modelBuilder.Entity("BusinessObject.TeachingDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TeachingDates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeachingDate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Quantity = 0,
                            TeachingDates = "Thứ 2, Thứ 5"
                        },
                        new
                        {
                            Id = 2,
                            Quantity = 0,
                            TeachingDates = "Thứ 3, Thứ 6"
                        },
                        new
                        {
                            Id = 3,
                            Quantity = 0,
                            TeachingDates = "Thứ 4, Thứ 7"
                        });
                });

            modelBuilder.Entity("BusinessObject.TeachingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("TeachingHistories");
                });

            modelBuilder.Entity("BusinessObject.TeachingSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.Property<bool>("StudentAttendance")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TeachingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.ToTable("TeachingSchedules");
                });

            modelBuilder.Entity("BusinessObject.TeachingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TeachingTimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeachingTime");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Quantity = 0,
                            TeachingTimes = "08:00 - 10:00"
                        },
                        new
                        {
                            Id = 2,
                            Quantity = 0,
                            TeachingTimes = "13:00 - 15:00"
                        },
                        new
                        {
                            Id = 3,
                            Quantity = 0,
                            TeachingTimes = "18:00 - 20:00"
                        });
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("BusinessObject.TutorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RentingQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TutorCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toán học",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vật lý",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hóa học",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sinh học",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lịch sử",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Địa lý",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ngữ văn",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tâm lý",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 9,
                            Name = "Triết học",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 10,
                            Name = "Xã hội",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 11,
                            Name = "Luật học",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 12,
                            Name = "Tiếng Anh",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 13,
                            Name = "Tiếng Pháp",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 14,
                            Name = "Tiếng Đức",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tiếng Trung",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 16,
                            Name = "Tiếng Nhật",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 17,
                            Name = "Lập trình",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 18,
                            Name = "Công nghệ",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 19,
                            Name = "Thiết kế",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 20,
                            Name = "Âm nhạc",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 21,
                            Name = "Mỹ thuật",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 22,
                            Name = "Tài chính",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 23,
                            Name = "Kinh doanh",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 24,
                            Name = "Marketing",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 25,
                            Name = "Kế toán",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 26,
                            Name = "Cơ khí",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 27,
                            Name = "Điện tử",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 28,
                            Name = "Y học",
                            Quantity = 0,
                            RentingQuantity = 0
                        },
                        new
                        {
                            Id = 29,
                            Name = "Dược học",
                            Quantity = 0,
                            RentingQuantity = 0
                        });
                });

            modelBuilder.Entity("BusinessObject.TutorContact", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("FacebookURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TutorId");

                    b.ToTable("TutorContact");
                });

            modelBuilder.Entity("BusinessObject.TutorInformation", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SalaryPerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TeachingStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTeachDay")
                        .HasColumnType("int");

                    b.Property<int>("TutorCategoryId")
                        .HasColumnType("int");

                    b.HasKey("TutorId");

                    b.HasIndex("TutorCategoryId");

                    b.ToTable("TutorInformation");

                    b.HasData(
                        new
                        {
                            TutorId = 2,
                            Degree = "link",
                            ExperienceYear = "10Year",
                            GeneralProfile = "general profile",
                            IsPremium = false,
                            IsRented = false,
                            Language = "Vietnamese",
                            SalaryPerHour = 0m,
                            TeachingStyle = "fun",
                            TotalTeachDay = 0,
                            TutorCategoryId = 1
                        });
                });

            modelBuilder.Entity("BusinessObject.Wallet", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LastChangeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TutorId");

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            TutorId = 2,
                            Balance = 0m,
                            LastChangeAmount = 0m,
                            LastChangeDate = new DateTime(2025, 2, 28, 22, 53, 24, 325, DateTimeKind.Local).AddTicks(7589)
                        });
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.BankInformation", b =>
                {
                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithOne("BankInformation")
                        .HasForeignKey("BusinessObject.BankInformation", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Certificate", b =>
                {
                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("Certificates")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Courses", b =>
                {
                    b.HasOne("BusinessObject.TeachingDate", "TeachingDate")
                        .WithMany("Courses")
                        .HasForeignKey("TeachingDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TeachingTime", "TeachingTime")
                        .WithMany("Courses")
                        .HasForeignKey("TeachingTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("Courses")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeachingDate");

                    b.Navigation("TeachingTime");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Courses", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BusinessObject.LearningHistory", b =>
                {
                    b.HasOne("BusinessObject.Courses", "Course")
                        .WithOne()
                        .HasForeignKey("BusinessObject.LearningHistory", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Courses", null)
                        .WithMany("LearningHistories")
                        .HasForeignKey("CoursesCourseId");

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("LearningHistories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithOne()
                        .HasForeignKey("BusinessObject.LearningHistory", "TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", null)
                        .WithMany("LearningHistories")
                        .HasForeignKey("TutorInformationTutorId");

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.LearningSchedule", b =>
                {
                    b.HasOne("BusinessObject.Courses", "Course")
                        .WithMany("LearningSchedules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("LearningSchedules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("LearningSchedules")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Order", b =>
                {
                    b.HasOne("BusinessObject.Courses", "Course")
                        .WithMany("Order")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Order")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("Order")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.Payment", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObject.Report", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("Reports")
                        .HasForeignKey("ReportById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("Reports")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.SystemAccount", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("SystemAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.SystemAccountWallet", b =>
                {
                    b.HasOne("BusinessObject.SystemAccount", "SystemAccount")
                        .WithOne("SystemAccountWallet")
                        .HasForeignKey("BusinessObject.SystemAccountWallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemAccount");
                });

            modelBuilder.Entity("BusinessObject.TeachingHistory", b =>
                {
                    b.HasOne("BusinessObject.Courses", "Course")
                        .WithMany("TeachingHistories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("TeachingHistories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("TeachingHistories")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.TeachingSchedule", b =>
                {
                    b.HasOne("BusinessObject.Courses", "Course")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithMany("TeachingSchedules")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.TransactionHistory", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.TutorContact", b =>
                {
                    b.HasOne("BusinessObject.TutorInformation", "TutorInformation")
                        .WithOne("TutorContact")
                        .HasForeignKey("BusinessObject.TutorContact", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TutorInformation");
                });

            modelBuilder.Entity("BusinessObject.TutorInformation", b =>
                {
                    b.HasOne("BusinessObject.TutorCategory", "TutorCategory")
                        .WithMany("TutorInformations")
                        .HasForeignKey("TutorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Account", "Account")
                        .WithOne("TutorInformation")
                        .HasForeignKey("BusinessObject.TutorInformation", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("TutorCategory");
                });

            modelBuilder.Entity("BusinessObject.Wallet", b =>
                {
                    b.HasOne("BusinessObject.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("BusinessObject.Wallet", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Account", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("LearningHistories");

                    b.Navigation("LearningSchedules");

                    b.Navigation("Order");

                    b.Navigation("Payments");

                    b.Navigation("Reports");

                    b.Navigation("TeachingHistories");

                    b.Navigation("TeachingSchedules");

                    b.Navigation("TransactionHistories");

                    b.Navigation("TutorInformation")
                        .IsRequired();

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Courses", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("LearningHistories");

                    b.Navigation("LearningSchedules");

                    b.Navigation("Order");

                    b.Navigation("TeachingHistories");

                    b.Navigation("TeachingSchedules");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SystemAccounts");
                });

            modelBuilder.Entity("BusinessObject.SystemAccount", b =>
                {
                    b.Navigation("SystemAccountWallet")
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.TeachingDate", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BusinessObject.TeachingTime", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BusinessObject.TutorCategory", b =>
                {
                    b.Navigation("TutorInformations");
                });

            modelBuilder.Entity("BusinessObject.TutorInformation", b =>
                {
                    b.Navigation("BankInformation")
                        .IsRequired();

                    b.Navigation("Certificates");

                    b.Navigation("Courses");

                    b.Navigation("LearningHistories");

                    b.Navigation("LearningSchedules");

                    b.Navigation("Order");

                    b.Navigation("Reports");

                    b.Navigation("TeachingHistories");

                    b.Navigation("TeachingSchedules");

                    b.Navigation("TutorContact")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
